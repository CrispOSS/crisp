---
title: Asynchronous Messages with Deadlines
layout: page
---
{% include JB/setup %}

<div class="row">

<div class="span12">


Crisp allows concurrent objects to send asynchronous messages with deadlines. This page walks through the feature and provides examples on how to use this feature.

You can use the following syntax to send an asynchronous messages to another concurrent object with a deadline:

<pre>
var f := o ! message (params) deadline (d)
</pre>

In the above example, @message@ is the method that is executed at the side of receiver @o@, @params@ are the actual parameters of the message, and @d@ is the deadline expectation on the response of the message.

A deadline @d@ should be expressed using @java.util.concurrent.TimeUnit@ abstraction. The value of @d@ denotes a _relative_ time to the current time that the sender of the message expects the response of the message to be ready. 

When a message with a deadline is sent, the response of the message is retrievable in a future reference @f@. The future reference is an extension over @java.util.concurrent.Future@ that provides the following extra behavior:
* If the message's deadline is missed, when @f.get()@ is called, it will cause an exception to be thrown.
* @f.isAborted()@ can be used to check the deadline for the message is missed or not.

The following sample code presents an actor that uses messages with deadline:

<pre>
class DataProcessor begin
	op process(d: Data) == 
		var p := allocDataProcessor(d)
		var D := estimateDeadline(d)
		var f := 
			p ! process (d) deadline (D)
		try {
			publishResult(f.get())
		} catch (Exception x) {
			if (f.isAborted)
				notifyFailure(d)
		}
end
</pre>

In the above, @DataProcessor@ is responsible for dispatching different data object to remote nodes to process the data and then collect the data results and publish them. To do so, the data processor first tries to estimate a _deadline_ based on the data object itself. When deadline is estimated, the process is delegated to the remote data processor node with the known deadline. The result of the data processing is captured in a future value @f@. Getting the results from the future blocks until the results are ready or the data processing has failed possibly because of a deadline miss. If the deadline is missed, it can be detected using @f.isAborted()@ to distinguish from other cases. 


</div>
</div>
